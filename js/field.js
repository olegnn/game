// Generated by LiveScript 1.3.1
(function(){
  var FieldInterface, HtmlTableField, this$ = this;
  FieldInterface = [
    function(size, cellEventListener){
      this.size = size;
    }, {
      destructor: function(){},
      getCell: function(id){},
      getCellData: function(id){},
      getCellNumber: function(cell){},
      setCellData: function(id, data){},
      setCellTouched: function(id){},
      setCellStart: function(id){}
    }
  ];
  HtmlTableField = (function(){
    HtmlTableField.displayName = 'HtmlTableField';
    var prototype = HtmlTableField.prototype, constructor = HtmlTableField;
    importAll$(prototype, arguments[0]);
    function HtmlTableField(size, cellEventListener, cellValue){
      var i$, to$, j, prevElement, element;
      this.size = size;
      this.setCellStart = bind$(this, 'setCellStart', prototype);
      this.setCellTouched = bind$(this, 'setCellTouched', prototype);
      this.setCellData = bind$(this, 'setCellData', prototype);
      this.getCellNumber = bind$(this, 'getCellNumber', prototype);
      this.getCellData = bind$(this, 'getCellData', prototype);
      this.getCell = bind$(this, 'getCell', prototype);
      this.destructor = bind$(this, 'destructor', prototype);
      this.table = document.body.appendChild(document.createElement('table'));
      this.table.style.fontSize = 250 / (this.size + 2);
      for (i$ = 0, to$ = this.size * this.size - 1; i$ <= to$; ++i$) {
        j = i$;
        if (!(j % this.size)) {
          this.table.appendChild(prevElement = document.createElement('tr'));
        }
        element = document.createElement('td');
        element.id = j;
        element.onclick = cellEventListener;
        element.innerText = cellValue;
        prevElement.appendChild(element);
      }
    }
    prototype.destructor = function(){
      if (this.table) {
        return document.body.removeChild(document.getElementsByTagName('table')[0]);
      }
    };
    prototype.getCell = function(id){
      return document.getElementById(id);
    };
    prototype.getCellData = function(id){
      return this.getCell(id).innerText;
    };
    prototype.getCellNumber = function(cell){
      return +cell.id;
    };
    prototype.setCellData = function(id, data){
      var cell, key, val, results$ = [];
      cell = this.getCell(id);
      if (typeof data === 'object') {
        for (key in data) {
          val = data[key];
          results$.push(cell[key] = val);
        }
        return results$;
      } else {
        return cell.innerText = data;
      }
    };
    prototype.setCellTouched = function(id){
      return this.setCellData(id, {
        className: 'touched-cell'
      });
    };
    prototype.setCellStart = function(id){
      return this.setCellData(id, {
        className: 'start-cell'
      });
    };
    return HtmlTableField;
  }(FieldInterface));
  this.Field = HtmlTableField;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
