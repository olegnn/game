// Generated by LiveScript 1.3.1
(function(){
  var Game, Field;
  Game = (function(){
    Game.displayName = 'Game';
    var prototype = Game.prototype, constructor = Game;
    function Game(size){
      var ref$;
      this.size = size;
      this.nextTurn = bind$(this, 'nextTurn', prototype);
      this.isGameOver = bind$(this, 'isGameOver', prototype);
      this.checkGameOver = bind$(this, 'checkGameOver', prototype);
      this.canFillCells = bind$(this, 'canFillCells', prototype);
      this.fillCells = bind$(this, 'fillCells', prototype);
      this.selectCell = bind$(this, 'selectCell', prototype);
      this.size = (ref$ = this.size) === 2 || ref$ === 3 || ref$ === 4 || ref$ === 5 || ref$ === 6 || ref$ === 7 || ref$ === 8 || ref$ === 9 || ref$ === 10 || ref$ === 11 || ref$ === 12 ? size : 4;
      /*
       * data is a vector that contains 0 and 1
       * (if cell is empty => 0 else => 1)
       *
       */
      this.data = repeatArray$(repeatArray$([0], this.size), this.size);
      /*
       * current player is number of player, whose turn
       * is at moment
       *
       */
      this.currentPlayer = null;
      /*
       * start position is the number of cell, from which
       * it will fill cells
       */
      this.startPos = null;
      /*
       * field is the table wich contains all cells
       *
       */
      this.field = new Field(size, this.selectCell);
      /*
       * calling next turn will set player to 1
       * and print all necessary messages
       *
       */
      this.nextTurn();
    }
    prototype.selectCell = function(obj){
      /*
       * Firstly check if cell is already filled
       *
       */
      if (this.data[this.field.getCellNumber(obj.target)]) {
        return;
      }
      /*
       * Then check start position and set them if
       * it isn't setted
       *
       */
      if (this.startPos != null) {
        if (this.canFillCells(this.startPos, this.field.getCellNumber(obj.target))) {
          this.fillCells(this.startPos, this.field.getCellNumber(obj.target));
          return this.checkGameOver();
        }
      } else {
        this.startPos = this.field.getCellNumber(obj.target);
        this.field.setCellData(obj.target, {
          className: 'start-cell'
        });
        return Info.postStateMessage("Выберите конечную клетку");
      }
    };
    prototype.fillCells = function(startPos, endPos){
      /*
       * swap min and max
       *
       */
      var isColumn, i$, j, results$ = [];
      if (startPos > endPos) {
        startPos = [endPos, endPos = startPos][0];
      }
      isColumn = this.isColumn(startPos, endPos);
      for (i$ = startPos; i$ <= endPos; ++i$) {
        j = i$;
        if (j % this.size === endPos % this.size && isColumn || !isColumn) {
          /*
           * if it's column then fill vertical
           * else horizontal
           *
           */
          this.data[j] = 1;
          this.field.setCellDataById(j, 1);
          results$.push(this.field.setCellDataById(j, {
            className: 'touched-cell'
          }));
        }
      }
      return results$;
    };
    prototype.isColumn = function(startPos, endPos){
      return endPos - startPos >= this.size || (endPos / this.size | 0) !== (startPos / this.size | 0);
    };
    prototype.canFillCells = function(startPos, endPos){
      /*
       * look at fillCells
       *
       */
      var isColumn, i$, j;
      if (startPos > endPos) {
        startPos = [endPos, endPos = startPos][0];
      }
      isColumn = this.isColumn(startPos, endPos);
      if (isColumn && (endPos - startPos) % this.size) {
        return false;
      }
      for (i$ = startPos; i$ <= endPos; ++i$) {
        j = i$;
        if (j % this.size === endPos % this.size && isColumn || !isColumn) {
          if (this.data[j]) {
            return false;
          }
        }
      }
      return true;
    };
    prototype.checkGameOver = function(){
      if (this.isGameOver()) {
        Info.postAlertMessage("Победа за игроком номер " + this.currentPlayer);
        this.field.destructor();
        return createGame(this.size);
      } else {
        return this.nextTurn();
      }
    };
    prototype.isGameOver = function(){
      return !this.data.filter(function(a){
        return a === 0;
      }).length;
    };
    prototype.nextTurn = function(){
      this.currentPlayer = this.currentPlayer === 1 ? 2 : 1;
      Info.postPlayerInfoMessage("Ход " + this.currentPlayer + " игрока");
      Info.postStateMessage("Выберите начальную клетку");
      return this.startPos = null;
    };
    return Game;
  }());
  Field = (function(){
    Field.displayName = 'Field';
    var prototype = Field.prototype, constructor = Field;
    function Field(size, cellEventListener){
      var i$, to$, j, prevElement, element;
      this.size = size;
      this.getCellNumber = bind$(this, 'getCellNumber', prototype);
      this.setCellDataById = bind$(this, 'setCellDataById', prototype);
      this.setCellData = bind$(this, 'setCellData', prototype);
      this.getCellDataById = bind$(this, 'getCellDataById', prototype);
      this.getCellData = bind$(this, 'getCellData', prototype);
      this.destructor = bind$(this, 'destructor', prototype);
      window.table = this.table = document.body.appendChild(document.createElement('table'));
      this.table.style.fontSize = 250 / (this.size + 2);
      for (i$ = 0, to$ = this.size * this.size - 1; i$ <= to$; ++i$) {
        j = i$;
        if (!(j % this.size)) {
          this.table.appendChild(prevElement = document.createElement('tr'));
        }
        element = document.createElement('td');
        element.id = j;
        element.onclick = cellEventListener;
        element.innerText = 0;
        prevElement.appendChild(element);
      }
    }
    prototype.destructor = function(){
      if (this.table) {
        return document.body.removeChild(document.getElementsByTagName('table')[0]);
      }
    };
    prototype.getCellData = function(cell){
      return cell.innerText;
    };
    prototype.getCellDataById = function(id){
      return this.getCellData(document.getElementById(id));
    };
    prototype.setCellData = function(cell, data){
      var key, val, results$ = [];
      switch (false) {
      case typeof data !== 'object':
        for (key in data) {
          val = data[key];
          results$.push(cell[key] = val);
        }
        return results$;
        break;
      default:
        return cell.innerText = data;
      }
    };
    prototype.setCellDataById = function(id, data){
      return this.setCellData(document.getElementById(id), data);
    };
    prototype.getCellNumber = function(cell){
      return +cell.id;
    };
    return Field;
  }());
  this.createGame = function(size){
    return new Game(size);
  };
  window.onload = function(){
    if (window.game != null) {
      if (window.game.field != null) {
        window.game.field.destructor();
      }
    }
    return window.game = createGame(+document.getElementById('size').value);
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function repeatArray$(arr, n){
    for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))
      if (n & 1) r.push.apply(r, arr);
    return r;
  }
}).call(this);
