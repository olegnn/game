// Generated by LiveScript 1.3.1
(function(){
  var Game;
  Game = (function(){
    Game.displayName = 'Game';
    var prototype = Game.prototype, constructor = Game;
    function Game(size){
      this.size = size != null ? size : 4;
      this.init = bind$(this, 'init', prototype);
      this.nextTurn = bind$(this, 'nextTurn', prototype);
      this.isGameOver = bind$(this, 'isGameOver', prototype);
      this.checkGameOver = bind$(this, 'checkGameOver', prototype);
      this.fillCells = bind$(this, 'fillCells', prototype);
      this.selectCell = bind$(this, 'selectCell', prototype);
      this.data = repeatArray$(repeatArray$([0], this.size), this.size);
      this.currentPlayer = 2;
      this.startPos = null;
      this.stateElement = document.getElementById('state');
      this.playerElement = document.getElementById('player');
      this.init();
      this.nextTurn();
    }
    prototype.selectCell = function(obj){
      if (+obj.target.innerText) {
        return alert("Эту клетку нельзя выбрать");
      }
      obj.target.className = 'start-cell';
      if (this.startPos != null) {
        if (this.fillCells(this.startPos, +obj.target.id)) {
          return this.checkGameOver();
        }
      } else {
        this.startPos = +obj.target.id;
        return this.stateElement.innerText = "Выберите конечную клетку";
      }
    };
    prototype.fillCells = function(startPos, endPos){
      var isColumn, i$, j, element;
      if (startPos > endPos) {
        startPos = [endPos, endPos = startPos][0];
      }
      isColumn = endPos - startPos >= this.size || (endPos / this.size | 0) !== (startPos / this.size | 0);
      if (isColumn && (endPos - startPos) % this.size) {
        return alert("Выберите конечную клетку на одной горизонталиили вертикали с текущей клеткой");
      }
      for (i$ = startPos; i$ <= endPos; ++i$) {
        j = i$;
        if ((j % this.size === endPos % this.size && isColumn) || !isColumn) {
          this.data[j] = 1;
          element = document.getElementById(j);
          element.innerText = 1;
          element.className = 'touched-cell';
        }
      }
      return true;
    };
    prototype.checkGameOver = function(){
      if (this.isGameOver()) {
        alert("Победа за игроком номер " + this.currentPlayer);
        return createGame(this.size);
      } else {
        return this.nextTurn();
      }
    };
    prototype.isGameOver = function(){
      return !this.data.filter(function(a){
        return a === 0;
      }).length;
    };
    prototype.nextTurn = function(){
      this.currentPlayer = this.currentPlayer === 1 ? 2 : 1;
      this.playerElement.innerText = "Ход " + this.currentPlayer + " игрока";
      this.stateElement.innerText = "Выберите начальную клетку";
      return this.startPos = null;
    };
    prototype.init = function(){
      var table, j, prevElement, element, results$ = [];
      if (document.getElementsByTagName("table").length) {
        document.body.removeChild(document.getElementsByTagName("table")[0]);
      }
      table = document.body.appendChild(document.createElement('table'));
      for (j in this.data) {
        if (!(j % this.size)) {
          table.appendChild(prevElement = document.createElement('tr'));
        }
        element = document.createElement('td');
        element.id = j;
        element.onclick = this.selectCell;
        element.innerText = 0;
        results$.push(prevElement.appendChild(element));
      }
      return results$;
    };
    return Game;
  }());
  this.createGame = function(size){
    return new Game(size);
  };
  window.onload = function(){
    return createGame(+document.getElementById('size').value);
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function repeatArray$(arr, n){
    for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))
      if (n & 1) r.push.apply(r, arr);
    return r;
  }
}).call(this);
